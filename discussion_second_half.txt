https://www.tutorialspoint.com/h2_database/index.htm#:~:text=H2%20is%20an%20open%2Dsource,not%20persist%20on%20the%20disk.

H2 is an open-source lightweight Java database. It can be embedded in Java applications or run in the client-server mode. H2 database can be configured to run as in-memory database, which means that data will not persist on the disk.
-----------------------------------------------------------------------------------------------------------
1) We created a spring starter Project.
2) So the dependencies :-
   * Spring Web
   * H2 Database
   * Spring JPA
--------------------------------------------------------------------------------------------------------
com.cts.demo.controller
com.cts.demo.model
com.cts.demo.service
con.cts.demo.dao
-------------------------------------------------------------------------------------------------------
pom.xml
-----------------------------------------------------------------------------------------------------------
<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
</dependencies>
-----------------------------------------------------------------------------------------------------------
application.properties

server.port=6666
spring.h2.console.enabled=true
spring.h2.console.path=/h2
spring.datasource.url=jdbc:h2:mem:bookdb
spring.datasource.driver-class-name=org.h2.Driver
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.datasource.username=sa
spring.datasource.password=password
spring.jpa.show-sql=true
--------------------------------------------------------------------------------------------------------
ackage com.cts.demo.model;

import javax.persistence.Entity;
import javax.persistence.Id;

@Entity
public class Book {
@Id
private int id;
private String title;
private float price;


public Book(int id, String title, float price) {
	super();
	this.id = id;
	this.title = title;
	this.price = price;
}
public int getId() {
	return id;
}
public void setId(int id) {
	this.id = id;
}
public String getTitle() {
	return title;
}
public void setTitle(String title) {
	this.title = title;
}
public float getPrice() {
	return price;
}
public void setPrice(float price) {
	this.price = price;
}


}
----------------------------------------------------------------------------------------------------------
package com.cts.demo.dao;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import com.cts.demo.model.Book;


@Repository
public interface BookRepository extends JpaRepository<Book, Integer> {

}
---------------------------------------------------------------------------------------------------------
package com.cts.demo.service;

import com.cts.demo.model.Book;
import java.util.List;

public interface BookService {

	 Book saveBook(Book book);
     Book deleteBook(int bookId);
     Book updateBook(int bookId, Book book);
     List<Book> getAllBooks();
}






package com.cts.demo.service;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.cts.demo.dao.BookRepository;
import com.cts.demo.model.Book;

// CRUD
@Service
public class BookServiceImpl implements BookService {

	
	@Autowired
	private BookRepository bookRepository;
	
	
	@Override
	public Book saveBook(Book book) {
		// TODO Auto-generated method stub
		return bookRepository.save(book);
	}

	@Override
	public Book deleteBook(int bookId) {
                Optional<Book> searchBook=bookRepository.findById(bookId);
                Book found=null;
                if(searchBook.isPresent())
                 {
                     found=searchBook.get();
                     bookRepository.delete(found);
                 }
		
		return found;
	}

	@Override
	public Book updateBook(int bookId, Book book) {
		Optional<Book> searchBook=bookRepository.findById(bookId);
                Book found=null;
                if(searchBook.isPresent())
                 {
                     found=searchBook.get();
                     bookRepository.save(found);
                 }
		
		return found;
	}

	@Override
	public List<Book> getAllBooks() {
	   List<Book>   bookList=bookRepository.findAll();
		return bookList;
	}

}


-----------------------------------------------------------------------------------------

import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.beans.factory.annotation.Autowired;


package com.cts.demo.controller;

@RestController

@RequestMapping("api/v1/book")
public class BookController {

@Autowired
private BookService bookService;
	
// http://localhost:6666/api/v1/book/saveBook
@PostMapping("/saveBook")
public Book saveBook(@RequestBody Book book)
{
    bookService.saveBook(book);
    return book;
}

   	
	
}

--------------------------------------------------------------------------------------
MySQL
application.properties

spring.datasource.url=jdbc:mysql://localhost:3306/bookDB
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.username=root
spring.datasource.password=password
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect

--------------------------------------------------------------------------------------------------------
